# -*- mode: makefile -*-
# The first line sets the emacs major mode to Makefile

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

################################################################
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You
# may not use this file except in compliance with the License. A copy
# of the License is located at
#
#     http://aws.amazon.com/apache2.0/
#
# or in the "license" file accompanying this file. This file is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
# ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the
# License.

################################################################
# This file Makefile.common defines the basic work flow for cbmc proofs.
#
# The intention is that the goal of your project is to write proofs
# for a collection of functions in a source tree.
#
# To use this file
#   1. Edit the variable definitions in Section I below as appropriate for
#      your project, your proofs, and your source tree.
#   2. For each function for which you are writing a proof,
#      a. Create a subdirectory <DIR>.
#      b. Write a proof harness (a function) with the name <HARNESS_ENTRY>
#         in a file with the name <DIR>/<HARNESS_FILE>.c
#      c. Write a makefile with the name <DIR>/Makefile that looks
#         something like
#
#         HARNESS_FILE=<HARNESS_FILE>
#         HARNESS_ENTRY=<HARNESS_ENTRY>
#         PROOF_UID=<PROOF_UID>
#
#         PROJECT_SOURCES += $(SRCDIR)/libraries/api_1.c
#         PROJECT_SOURCES += $(SRCDIR)/libraries/api_2.c
#
#         PROOF_SOURCES += $(PROOFDIR)/harness.c
#         PROOF_SOURCES += $(SRCDIR)/cbmc/proofs/stub_a.c
#         PROOF_SOURCES += $(SRCDIR)/cbmc/proofs/stub_b.c
#
#         UNWINDSET += foo.0:3
#         UNWINDSET += bar.1:6
#
#         REMOVE_FUNCTION_BODY += api_stub_a
#         REMOVE_FUNCTION_BODY += api_stub_b
#
#         DEFINES = -DDEBUG=0
#
#         include ../Makefile.common
#
#      d. Change directory to <DIR> and run make
#
# Dependency handling in this file may not be perfect. Consider
# running "make clean" or "make veryclean" before "make report" if you
# get results that are hard to explain.

SHELL=/bin/bash

default: test

################################################################
################################################################
## Section I: This section gives common variable definitions.
##
## Feel free to edit these definitions for your project.
##
## Definitions specific to a proof (generally definitions defined
## below with ?= like PROJECT_SOURCES listing the project source files
## required by the proof) should be defined in the proof Makefile.
##
## Remember that this Makefile is intended to be included from the
## Makefile in your proof directory, so all relative pathnames should
## be relative to your proof directory.
##

# Absolute path to the directory containing this Makefile.common
# See https://ftp.gnu.org/old-gnu/Manuals/make-3.80/html_node/make_17.html
#
# Note: We compute the absolute paths to the makefiles in MAKEFILE_LIST
# before we filter the list of makefiles for %/Makefile.common.
# Otherwise an invocation of the form "make -f Makefile.common" will set
# MAKEFILE_LIST to "Makefile.common" which will fail to match the
# pattern %/Makefile.common.
#
MAKEFILE_PATHS = $(foreach makefile,$(MAKEFILE_LIST),$(abspath $(makefile)))
PROOF_ROOT = $(dir $(filter %/Makefile.common,$(MAKEFILE_PATHS)))

WASP_ROOT = $(shell dirname $(PROOF_ROOT))
PROOF_STUB = $(WASP_ROOT)/stubs
PROOF_SOURCE = $(WASP_ROOT)/sources

# Project-specific definitions to override default definitions below
#   * Makefile-project-defines will never be overwritten
#   * Makefile-template-defines will be overwritten each time the
#     proof templates are updated
sinclude $(PROOF_ROOT)/Makefile-project-defines
sinclude $(PROOF_ROOT)/Makefile-template-defines

# SRCDIR is the path to the root of the source tree
SRCDIR ?= $(abspath $(PROOF_ROOT)/../../..)

# PROOFDIR is the path to the directory containing the proof harness
PROOFDIR ?= $(abspath .)

# Path to the root of the cbmc project.
#
# Projects generally have a directory $(CBMCDIR) with subdirectories
# $(CBMCDIR)/proofs containing the proofs and maybe $(CBMCDIR)/stubs
# containing the stubs used in the proof.  This Makefile is generally
# at $(CBMCDIR)/proofs/Makefile.common.
WASPDIR ?= $(PROOF_ROOT)/wasp

# Flags to pass to goto-cc for compilation and linking
COMPILE_FLAGS ?=
LINK_FLAGS ?=

# Preprocessor include paths -I...
INCLUDES ?=

# Preprocessor definitions -D...
DEFINES ?=

# The project source files (Normally set set in the proof Makefile)
#
# PROJECT_SOURCES is the list of project source files to compile,
# including the source file defining the function under test.
PROJECT_SOURCES ?=

# The proof source files (Normally set in the proof Makefile)
#
# PROOF_SOURCES is the list of proof source files to compile, including
# the proof harness, and including any function stubs being used.
PROOF_SOURCES ?=

################################################################
################################################################
## Section II: This section is for project-specific definitions


################################################################
################################################################
## Section II: This section defines the process of running a proof
##
## There should be no reason to edit anything below this line.

################################################################
# Paths

test: $(PROOF_UID)

$(PROOF_UID): 
	@clang $(INCLUDES) $(HARNESS_FILE) $(PROJECT_SOURCES) $(PROOF_SOURCES) -c

################################################################

# Project-specific targets requiring values defined above
sinclude $(PROOF_ROOT)/Makefile-project-targets

# CI-specific targets to drive cbmc in CI
sinclude $(PROOF_ROOT)/Makefile-project-testing

################################################################
